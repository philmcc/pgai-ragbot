services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        BASE_IMAGE_REF: ${DB_BASE_IMAGE:-timescale/timescaledb-ha:pg17}
    container_name: pgai-db
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=pgai
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_EC2_METADATA_DISABLED=true
      - S3_ENDPOINT_URL=http://minio:9000
      - SINGLE=true
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/home/postgres/pgdata/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 30

  postgrest:
    image: ${POSTGREST_IMAGE:-postgrest/postgrest:v12.2.3}
    container_name: pgai-postgrest
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://postgres:postgres@db:5432/pgai
      PGRST_DB_SCHEMAS: app
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_POOL: "10"
      PGRST_DB_EXTRA_SEARCH_PATH: public, ai
      PGRST_DB_PRE_REQUEST: app.set_request_context
      PGRST_SERVER_PORT: "3000"
      PGRST_OPENAPI_SERVER_PROXY_URI: http://localhost:3000
      PGRST_SERVER_HOST: 0.0.0.0
      PGRST_JWT_SECRET: "dev-secret"
      PGRST_LOG_LEVEL: info
      PGRST_SERVER_CORS_ALLOWED_ORIGINS: "*"
      PGRST_SERVER_CORS_MAX_AGE: "86400"
      PGRST_SERVER_CORS_ALLOWED_HEADERS: "Content-Type, Authorization, Prefer, Range, Accept"
      PGRST_SERVER_CORS_ALLOWED_METHODS: "GET,POST,OPTIONS,PUT,PATCH,DELETE"
      PGRST_DB_USE_LEGACY_GUCS: "true"
    ports:
      - "3000:3000"

  minio:
    image: ${MINIO_IMAGE:-minio/minio:RELEASE.2024-08-17T01-24-00Z}
    container_name: pgai-minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console
    volumes:
      - ./minio-data:/data

  minio-setup:
    image: ${MINIO_MC_IMAGE:-minio/mc:RELEASE.2024-08-17T01-24-00Z}
    container_name: pgai-minio-setup
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      set -e
      mc alias set local http://minio:9000 minioadmin minioadmin;
      mc mb --ignore-existing local/documents;
      mc anonymous set private local/documents;
      echo 'MinIO bucket ready';
      sleep 2;
      "

  vectorizer-worker:
    image: timescale/pgai-vectorizer-worker:latest
    container_name: pgai-vectorizer-worker
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Database URL for the vectorizer worker
      - PGAI_VECTORIZER_WORKER_DB_URL=postgres://postgres:postgres@db:5432/pgai
      # OpenAI key for embeddings (set via environment or .env)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # MinIO / S3 access for smart_open (if loading from URIs is used later)
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_EC2_METADATA_DISABLED=true
      - AWS_ENDPOINT_URL=http://minio:9000
    volumes:
      - ./scripts:/scripts:ro
    entrypoint: ["/bin/sh", "/scripts/vectorizer-start.sh"]

  frontend:
    image: ${NGINX_IMAGE:-nginx:1.27.0-alpine}
    container_name: pgai-frontend
    depends_on:
      - postgrest
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro

  ingest-cron:
    image: curlimages/curl:8.7.1
    container_name: pgai-ingest-cron
    depends_on:
      postgrest:
        condition: service_started
    environment:
      - TARGET=http://postgrest:3000/rpc/run_ingest_once
      - INTERVAL=${INGEST_INTERVAL:-30}
    # Use $$ to escape Docker Compose env interpolation; container receives $TARGET/$INTERVAL
    command: ["sh", "-lc", "while true; do curl -sS -m 20 -H 'Content-Type: application/json' -X POST $$TARGET -d '{}' >/dev/null || true; sleep $$INTERVAL; done"]
    restart: unless-stopped

volumes:
  pgdata:
